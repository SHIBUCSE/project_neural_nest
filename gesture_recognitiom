import cv2
import mediapipe as mp
import numpy as np

def calculate_angle(a, b, c):
    """Calculate angle using 3 points."""
    a, b, c = np.array(a), np.array(b), np.array(c)
    radians = np.arctan2(c[1]-b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0])
    angle = np.abs(radians * 180.0 / np.pi)
    return 360 - angle if angle > 180 else angle

mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose

cap = cv2.VideoCapture(0)

with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        frame = cv2.flip(frame, 1)
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
        results = pose.process(image)

        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

        try:
            lm = results.pose_landmarks.landmark
            w, h = frame.shape[1], frame.shape[0]

            # Extract keypoints (just once)
            coords = lambda part: [lm[part].x, lm[part].y]
            joints = {
                'r_shoulder': coords(mp_pose.PoseLandmark.RIGHT_SHOULDER),
                'r_elbow':    coords(mp_pose.PoseLandmark.RIGHT_ELBOW),
                'r_wrist':    coords(mp_pose.PoseLandmark.RIGHT_WRIST),
                'l_shoulder': coords(mp_pose.PoseLandmark.LEFT_SHOULDER),
                'l_elbow':    coords(mp_pose.PoseLandmark.LEFT_ELBOW),
                'l_wrist':    coords(mp_pose.PoseLandmark.LEFT_WRIST)
            }

            # Calculate angles
            r_angle = calculate_angle(joints['r_shoulder'], joints['r_elbow'], joints['r_wrist'])
            l_angle = calculate_angle(joints['l_shoulder'], joints['l_elbow'], joints['l_wrist'])

            # Status check
            correct = (30 <= r_angle <= 160) or (30 <= l_angle <= 160)
            status = "Correct ✅" if correct else "Incorrect ❌"
            color = (0, 255, 0) if correct else (0, 0, 255)

            # Display
            def draw_text(txt, pos, scale=1.0, col=(255,255,255)):
                cv2.putText(image, txt, pos, cv2.FONT_HERSHEY_SIMPLEX, scale, col, 2)

            # Convert elbow positions
            r_pos = tuple(np.multiply(joints['r_elbow'], [w, h]).astype(int))
            l_pos = tuple(np.multiply(joints['l_elbow'], [w, h]).astype(int))

            draw_text(f'R-Angle: {int(r_angle)}°', (r_pos[0]-40, r_pos[1]-20))
            draw_text(f'L-Angle: {int(l_angle)}°', (l_pos[0]-40, l_pos[1]-20))
            draw_text(f'Position: {status}', (50, 70), scale=1.4, col=color)

        except:
            cv2.putText(image, "No person detected", (50, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

        cv2.namedWindow('Dumbbell Form Checker', cv2.WND_PROP_FULLSCREEN)
        cv2.setWindowProperty('Dumbbell Form Checker', cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
        cv2.imshow('Dumbbell Form Checker', image)

        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()
